# -*- coding: utf-8 -*-
from mastermind_engine import guess_number, check_number, game_over


# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (scopes_and_namespace/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT


def check_length(guess_checking):
    guess_array = set(guess_checking)
    if guess_checking[0] == '0':
        print('Список начинается с 0')
        return False
    elif len(guess_checking) != 4:
        print('В списке некорректное количество значений')
        return False
    elif len(guess_array) != len(guess_checking):
        print('Есть одинаковые значения')
        return False
    else:
        return True


guess_number()

print(guess_number())
while True:
    print(
        'Я загадал 4-х значное число.Все числа разные и начинается не с 0.Твой вариант?'
    )

    guess = input()
    step_length_success = check_length(guess_checking=guess)
    if step_length_success:
        print_result_check_number = check_number(guess)
        print('быки - ', print_result_check_number['bulls'], 'коровы - ',
              print_result_check_number['cows'])

    if game_over():
        print('Вы отгадали число на ', game_over(), ' попытке')
        print('Хотите еще партию?')
        answer_to_continue = input()
        if answer_to_continue == 'да':
            guess_number()
        elif answer_to_continue == 'нет':
            break
        else:
            'Введите ответ киррилицей, маленькими буквами.'
